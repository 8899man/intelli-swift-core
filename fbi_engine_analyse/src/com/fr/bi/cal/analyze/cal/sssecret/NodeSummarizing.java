package com.fr.bi.cal.analyze.cal.sssecret;import com.fr.bi.stable.report.key.TargetGettingKey;/** * Created by Hiram on 2015/1/28. */public class NodeSummarizing {    private MetricMergeResult node;    protected TargetGettingKey[] targetGettingKeys;    public NodeSummarizing(MetricMergeResult node, TargetGettingKey[] targetGettingKeys) {        this.node = node;        this.targetGettingKeys = targetGettingKeys;    }    protected void sum(){        //不管怎样，root的汇总值必须要清，root没有child的话汇总值就是空        resetSummaryValue(node);        sum(node);    }    protected void sum(MetricMergeResult node) {        //没有child的就不用汇总了        if (node.getChildLength() == 0) {            return;        }        resetSummaryValue(node);        for (int i = 0; i < node.getChildLength(); i++) {            MetricMergeResult child = (MetricMergeResult) node.getChild(i);            sum(child);            for (TargetGettingKey key : targetGettingKeys) {                Number value = node.getSummaryValue(key);                if (value == null) {                    node.setSummaryValue(key, child.getSummaryValue(key));                } else {                    Number childValue = child.getSummaryValue(key);                    if (childValue != null) {                        Double sum = value.doubleValue();                        sum += childValue.doubleValue();                        node.setSummaryValue(key, sum);                    }                }            }        }    }    protected void resetSummaryValue(MetricMergeResult node) {        node.setSummaryValue(new Number[node.getSummaryValue().length]);    }}