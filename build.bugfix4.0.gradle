apply plugin:'java'

//应用jacoco plugin
apply plugin : 'jacoco'
tasks.withType(JavaCompile){
	options.encoding = 'UTF-8'
}

//每次构建前先删掉build目录和reports目录
ant.delete(dir:"build")
ant.delete(dir:"reports")

repositories {
    mavenCentral()
}
//sourceCompatibility=1.5
//BI工程的根目录
def BI_HOME='../../'
def jarname='fr-bi-server-4.0.jar'
//指定生成的jar包版本
version='4.0'
//获取什么分支名
FileTree files =fileTree(dir:'./',include:'build.*.gradle')
def buildDir=files[0].path.substring(0,files[0].path.lastIndexOf ('\\'))
def branchName=buildDir.substring(buildDir.lastIndexOf ('\\')+1)

jar{
//指定生成jar包的名称
	baseName='fr-bi-server'
}
def list=[
		"fbi/src",
		"fbi_base/src",
		"fbi_engine_finereport/src",
		"fbi_conf/src", 
		"fbi_h5/src",
		"fbi_engine_base/src",
		"fbi_engine_generate/src",
		"fbi_engine_analyse/src",
		"fbi_engine_cache/src",
		"fbi_cluster/src",
		"fbi_web/src",
		"fbi_web_base/src",
		"fbi_web_conf/src",
		"fbi_web_dezi/src",
		"fbi_web_report/src",
		"fbi_analysis_etl/src",
		"fbi_cube_base/src",
		"fbi_cube_conf/src",
		"fbi_cube_generate/src"
	]

//指定源码所在位置：
sourceSets{
	main.java.srcDirs=list
	
	test.java.srcDirs = [
			"fbi_analysis_etl/test",
			"fbi_base/test",
			//err"fbi_cluster/test",
			"fbi_conf/test",
			//long"fbi_cube_base/test",
			"fbi_cube_conf/test",
			//err"fbi_cube_generate/test",
			//err"fbi_datasource_api/test",
			//err"fbi_engine_analyse/test",
			//err"fbi_engine_base/test",
			//err"fbi_engine_generate/test",
			"fbi_web/test",
			"fbi_web_conf/test",
	]
	instrumentTest.java.srcDirs=[
		//"fbi/test",
		"fbi_base/test",
		//"fbi_engine_finereport/test",
		"fbi_conf/test", 
		"fbi_engine_base/Test",
		"fbi_engine_generate/test",
		"fbi_engine_analyse/test",
		//"fbi_engine_cache/test",
		"fbi_cluster/test",
		"fbi_web/test",
		//"fbi_web_base/test",
		"fbi_web_conf/test",
		//"fbi_web_dezi/test",
		//"fbi_web_report/test",
		"fbi_analysis_etl/test",
		"fbi_cube_base/test",
		"fbi_cube_conf/test",
		"fbi_cube_generate/test"
	]


}

test {
	//这条很重要，设置忽略fail掉的测试用例。否则会导致项目构建失败
	ignoreFailures = true
	jacoco {
		append = true
		//二进制代码覆盖测试报告文件存放路径
		destinationFile = file("reports/jacoco/jacoco.exec")
	}
}

//声明外部依赖
dependencies{
	compile fileTree(dir:"${BI_HOME}/lib/${branchName}",include:'**/*.jar')
	testCompile 'junit:junit:4.12'
}
//指明无法编译文件所在路径
def dataContent ={def dir ->
		copySpec{
			from ("${dir}"){
				exclude '**/.setting/**',
				'.classpath',
				'.project',
				'**/*.java',
				'**/*.db',
				'**/*.g',
				'**/package.html',
				'**/*.less',
				'**/cross/demo/**',
				'**/test/**'
			}
		}
}

//将非.java文件复制到classes文件夹下 参与打包
task copyFile(type:Copy,dependsOn:compileJava){
	list.each{ def srcDir->
		copy{
			with dataContent.call("${srcDir}") 
			into ('build/classes/main')
		}
	}
}
//压缩js
task compressJS(dependsOn:'copyFile'){
	ant.taskdef(name:'yuicompress',classname:'com.yahoo.platform.yui.compressor.YUICompressTask',onerror:'report'){
		classpath{
			pathelement(path:"${BI_HOME}/lib4build/YUIAnt.jar")
			pathelement(path:"${BI_HOME}/lib4build/yuicompressor-2.4.6.jar")
			
		}
	}
	ant.yuicompress(linebreak:"500",warn:"false", munge:"yes",preserveallsemicolons:"false", charset:"utf-8",encoding:"utf-8",outputfolder:'build/classes/main/com/fr/bi/web'){
		fileset(dir:'build/classes/main/com/fr/bi/web'){
			include (name:'**/*.js')
			include (name:'**/*.css')
			exclude (name:'**/js/template/*.js')
			exclude (name:'**/js/third/*.js')
			exclude (name:'**/cross/demo/**')
			exclude (name:'**/test/**')
			exclude (name:'**/web/js/components/components.react.js')
		}
	}
}
//添加打包时间
task addTime(dependsOn:'compressJS'){
	def date = new Date()
	def formattedDate = date.format('yyyy.MM.dd.HH.mm.ss.S')
	File file =file(new File('build/classes/main/bibuild.txt'))
	FileWriter fw=new FileWriter(file)
	fw.write(formattedDate)
	fw.close()		
}

//混淆代码
task obfuse(dependsOn:'build')<<{
	ant.delete(dir:"${BI_HOME}/build/${branchName}/build/JAR/tmp/1.8")
	ant.mkdir(dir:"${BI_HOME}/build/${branchName}/build/JAR/tmp/1.8")
	ant.taskdef(name:'yguard',classname:'com.yworks.yguard.YGuardTask',classpath:"${BI_HOME}/lib4build/yguard.jar")
	ant.yguard(){
		inoutpair(in:"build/libs/${jarname}",out:"${BI_HOME}/build/${branchName}/build/JAR/tmp/1.8/${jarname}")
		rename(){
		keep{
			method(name:'void main(String[])'){
				patternset(id:'datapatternset'){
					include (name:'**.*')
				}
			}
			method(name:'void readObject(java.io.ObjectInputStream)'){
				patternset(refid:'datapatternset')
			}
			method(name:'void writeObject(java.io.ObjectOutputStream)'){
				patternset(refid:'datapatternset')				
			}
			field(name:'serialVersionUID'){
				patternset(refid:'datapatternset')				
			}
			'class'(methods:'private',fields:'private'){
				patternset{
					include(name:'**.*')
					exclude(name:'com.fr.report.core.cal.**.*')
					exclude(name:'com.fr.base.core.util.vt.**.*')
					exclude(name:'com.fr.web.core.service.**.*')
				}
			}
		}
		}
	}
	ant.delete(file:'yguardlog.xml')
}
