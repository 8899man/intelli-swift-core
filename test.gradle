
apply plugin: 'java'
tasks.withType(JavaCompile){
		options.encoding = 'UTF-8'
		destinationDir = file('build/classes/test')
}
//指定构建的jdk版本
sourceCompatibility=1.5
//指定jar包版本
version='10.0'
//给自定义jar

def srcDir="."

//获取什么分支名
FileTree files =fileTree(dir:'./',include:'test*.gradle')
def buildDir=files[0].path.substring(0,files[0].path.lastIndexOf ('/'))
def branchName=buildDir.substring(buildDir.lastIndexOf ('/')+1)

//设置源码路径
	sourceSets{
		main {
			java{
				srcDirs=["${srcDir}/basic-base/test",
					"${srcDir}/basic-chart/test",
					"${srcDir}/basic-form/test",
					"${srcDir}/basic-function/test",
					"${srcDir}/basic-headerfooter/test",
					"${srcDir}/basic-privilege/test",
					"${srcDir}/basic-record/test",
					"${srcDir}/basic-upload/test",
					"${srcDir}/basic-market/test",
					"${srcDir}/basic-web/test"]
			}
		}
		
	
	}
repositories {
         mavenCentral()
}
def basicDir="../../"

dependencies{
	compile fileTree(dir:"../../finereport-lib-stable/${branchName}",include:'**/*.jar')
	compile fileTree(dir:"build/libs",include:"**/*.jar")
	compile fileTree(dir:'../../',include:"finereport-*-code/${branchName}/build/libs/*.jar")
	testCompile "junit:junit:4.12"
}
//将无法编译的文件copy到classes文件夹参与打包
task copyFile(type:Copy){
	copy{

		from ("${srcDir}/basic-base/test"){
			exclude "**/*.java","**/.settings/**",".classpath",".project","**/*.db","**/*.g","**/package.html"
		
		}

		into "build/classes/test"

	}

	copy{

		from ("${srcDir}/basic-chart/test"){
			exclude "**/*.java","**/.settings/**",".classpath",".project","**/*.db","**/*.g","**/package.html"
		
		}

		into "build/classes/test"

	}

	copy{

		from ("${srcDir}/basic-form/test"){
			exclude "**/*.java","**/.settings/**",".classpath",".project","**/*.db","**/*.g","**/package.html"
		
		}

		into "build/classes/test"

	}

	copy{

		from ("${srcDir}/basic-function/test"){
			exclude "**/*.java","**/.settings/**",".classpath",".project","**/*.db","**/*.g","**/package.html"
		
		}

		into "build/classes/test"

	}

	copy{

		from ("${srcDir}/basic-headerfooter/test"){
			exclude "**/*.java","**/.settings/**",".classpath",".project","**/*.db","**/*.g","**/package.html"
		
		}

		into "build/classes/test"

	}

		copy{

		from ("${srcDir}/basic-privilege/test"){
			exclude "**/*.java","**/.settings/**",".classpath",".project","**/*.db","**/*.g","**/package.html"
		
		}

		into "build/classes/test"

	}

		copy{

		from ("${srcDir}/basic-record/test"){
			exclude "**/*.java","**/.settings/**",".classpath",".project","**/*.db","**/*.g","**/package.html"
		
		}

		into "build/classes/test"

	}

		copy{

		from ("${srcDir}/basic-upload/test"){
			exclude "**/*.java","**/.settings/**",".classpath",".project","**/*.db","**/*.g","**/package.html"
		
		}

		into "build/classes/test"

	}

		copy{

		from ("${srcDir}/basic-market/test"){
			exclude "**/*.java","**/.settings/**",".classpath",".project","**/*.db","**/*.g","**/package.html"
		
		}

		into "build/classes/test"

	}


		copy{

		from ("${srcDir}/basic-web/test"){
			exclude "**/*.java","**/.settings/**",".classpath",".project","**/*.db","**/*.g","**/package.html"
		
		}

		into "build/classes/test"

	}

}

task test_jar(dependsOn:compileJava)<<{
	ant.delete(dir:"test_result")
	ant.mkdir(dir:"test_result")
	ant{
		taskdef(name:"junit",classname:"org.apache.tools.ant.taskdefs.optional.junit.JUnitTask"){
			classpath(){
				pathelement(path:"${basicDir}/finereport-lib-stable/${branchName}/test/ant-junit.jar")
				pathelement(path:"${basicDir}/finereport-lib-stable/${branchName}/test/junit-4.12.jar")
			}	
		}
		taskdef(name:"junitreport",classname:"org.apache.tools.ant.taskdefs.optional.junit.XMLResultAggregator"){
			classpath(){
				pathelement(path:"${basicDir}/finereport-lib-stable/${branchName}/test/ant-junit.jar")
			}	
		}

		taskdef(name:"jacocoCoverage", classname:"org.jacoco.ant.CoverageTask") {
			classpath() {
			    pathelement(path:"${basicDir}/finereport-lib-stable/${branchName}/test/jacocoant.jar")
			}
		    }

		        //如果你希望得到可视化的测试报告（如html报告），而不依赖于Jenkins，你可以自己定义JacocoReport任务
		    taskdef(name:"jacocoReport", classname:"org.jacoco.ant.ReportTask") {
			classpath() {
			    pathelement(path:"${basicDir}/finereport-lib-stable/${branchName}/test/jacocoant.jar")
			}
		    }
		 jacocoCoverage(destfile:"reports/jacoco/jacoco.exec", append:"true") {
			junit(printsummary:"on",fork:"true",haltonfailure:"false",failureproperty:"tests.failed",showoutput:"true"){
				classpath(){
					fileset(dir:"."){
						include(name:"build/libs/*.jar")
			
					}
					fileset(dir:"${basicDir}/finereport-lib-stable/${branchName}") {
						include(name:"fine-third-10.0.jar")
					}
					fileset(dir:"${basicDir}/finereport-lib-stable/${branchName}"){ 
						include(name:"**/*.jar")
					}
					fileset(dir:"${basicDir}"){ 
						include(name:"finereport-*-code/${branchName}/**/*.jar")
					}
				}
				classpath(path:"build/classes/test")
				formatter(type:"xml")
				batchtest(todir:"test_result"){
					fileset(dir:"build/classes/test"){
						include(name:"**/*Test.class")
					}
				}
			}
		}
		    jacocoReport() {
        //exec文件所在目录
        executiondata {
            fileset(dir:"reports/jacoco") {
                include(name:"jacoco.exec")
            }
        }
        //指明被测试的类/源文件所在目录
        structure(name:"jacoco") {
            classfiles {
                fileset(dir:"build/classes/main") {
                    include(name:"**/*.class")
                }
            }
            sourcefiles {
                fileset(dir:"${srcDir}") {
                    include(name:"**/src/**/*.java")
                }
            }
        }
        //报告文件存放位置
        html(destdir:"reports/jacoco/html")
        xml(destfile:"reports/jacoco/jacoco.xml")
        csv(destfile:"reports/jacoco/jacoco.csv")
    }
		junitreport(todir:"test_result"){
			fileset(dir:"test_result"){
				include(name:"TEST-*.xml")
			}
			report(format:"frames",todir:"test_result/report")
		}	
		fail(if:"tests.failed",message:"There were test failures.")
	
	}
}

