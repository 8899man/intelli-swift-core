package com.fr.bi.cal.analyze.cal.result;import com.fr.bi.field.target.key.sum.AvgKey;import com.fr.bi.stable.constant.BIReportConstant;import com.fr.bi.stable.operation.sort.comp.ComparatorFacotry;import com.fr.bi.stable.report.key.TargetGettingKey;import com.fr.bi.stable.report.result.BINode;import com.fr.bi.stable.structure.tree.NTree;/** * Created by Hiram on 2015/1/27. */public class NodeUtils {	    public static Double getTopN(BINode node, TargetGettingKey key, int N) {        Double nLine;        int count = node.getChildLength();        N = Math.min(N, count);        NTree<Double> tree = N < (count << 2) ? new NTree<Double>(ComparatorFacotry.DOUBLE_DESC, N) : new NTree<Double>(ComparatorFacotry.DOUBLE_ASC, count + 1 - N);        for (int i = 0; i < count; i++) {            BINode child = node.getChild(i);            Number v = child.getSummaryValue(key);            if(key.getTargetKey().getSummaryType() == BIReportConstant.SUMMARY_TYPE.AVG){                String targetName = key.getTargetName();                AvgKey avgKey = (AvgKey) key.getTargetKey();                TargetGettingKey sumGettingKey = new TargetGettingKey(avgKey.getSumKey(), targetName);                TargetGettingKey countGettingKey = new TargetGettingKey(avgKey.getCountKey(), targetName);                Number sumValue = child.getSummaryValue(sumGettingKey);                Number countValue = child.getSummaryValue(countGettingKey);                double avgValue = 0;                if (sumValue != null && countValue != null) {                    avgValue = sumValue.doubleValue() / countValue.doubleValue();                }                v = avgValue;            }            if (v != null) {            	tree.add(v.doubleValue());            }        }        nLine = tree.getLineValue();        if(nLine == null){        	nLine = Double.POSITIVE_INFINITY;        }        return nLine;    }    public static void setSiblingBetweenFirstAndLastChild(BINode root) {        for (int i = 0; i < root.getChildLength(); i++) {            BINode parent = root.getChild(i);            if (parent.getChildLength() != 0) {                setSiblingBetweenFirstAndLastChild(parent);            }            if (i + 1 < root.getChildLength()) {                BINode nextParent = root.getChild(i + 1);                BINode tmpLastChild = parent.getLastChild();                BINode tmpFirstChild = nextParent.getFirstChild();                while (tmpLastChild != null && tmpFirstChild != null) {                    tmpLastChild.setSibling(tmpFirstChild);                    tmpLastChild = tmpLastChild.getLastChild();                    tmpFirstChild = tmpFirstChild.getFirstChild();                }            }        }    }}