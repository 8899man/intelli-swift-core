package com.fr.bi.cluster.lock;import java.util.Date;import java.util.concurrent.TimeUnit;import java.util.concurrent.locks.Condition;import java.util.concurrent.locks.ReentrantLock;/** * Created by Hiram on 2015/2/28. */public class SimpleCondition implements Condition {    private ReentrantLock lock = new ReentrantLock();    private Condition condition = lock.newCondition();    @Override    public void await() throws InterruptedException {        condition.await();    }    @Override    public void awaitUninterruptibly() {        condition.awaitUninterruptibly();    }    @Override    public long awaitNanos(long nanosTimeout) throws InterruptedException {        return condition.awaitNanos(nanosTimeout);    }    @Override    public boolean await(long time, TimeUnit unit) throws InterruptedException {        return condition.await(time, unit);    }    @Override    public boolean awaitUntil(Date deadline) throws InterruptedException {        return condition.awaitUntil(deadline);    }    @Override    public void signal() {        condition.signal();    }    @Override    public void signalAll() {        condition.signalAll();    }}