package com.fr.bi.cal.analyze.cal.adapter;import com.fr.bi.cal.analyze.cal.sssecret.ISingleDimensionGroup;import com.fr.bi.cal.analyze.cal.store.GroupKey;import com.fr.bi.cal.analyze.session.BISession;import com.fr.bi.exception.UnCompleteMethodException;import com.fr.bi.stable.structure.collection.map.lru.FIFOHashMap;import java.util.HashMap;import java.util.Map;/** * Created by Hiram on 2015/7/10. */public class GroupCache {    private final static int CACHE_SIZE = 1 << 20;    private static FIFOHashMap<GroupKey, ISingleDimensionGroup> singleDimensionGroupCache = new FIFOHashMap<GroupKey, ISingleDimensionGroup>(CACHE_SIZE);    private static Map<GroupKey, ISingleDimensionGroup> lightCache = new HashMap<GroupKey, ISingleDimensionGroup>();    public static ISingleDimensionGroup getLightDimensionGroupCache(BISession session, GroupKey groupKey) {        return lightCache.get(groupKey);    }    public static void putLightSingleDimensionGroupCache(BISession session, GroupKey groupKey, ISingleDimensionGroup singleDimensionGroup) {        if (lightCache.size() > 1000) {            lightCache.clear();        }        lightCache.put(groupKey, singleDimensionGroup);    }    public static ISingleDimensionGroup getFirstSingleDimensionGroupCache(BISession session, GroupKey groupKey) {        throw new UnCompleteMethodException("TODO_WAIT");//		return singleDimensionGroupCache.get(groupKey);    }    public static void putFirstSingleDimensionGroupCache(BISession session, GroupKey groupKey, ISingleDimensionGroup singleDimensionGroup) {        singleDimensionGroupCache.put(groupKey, singleDimensionGroup);    }}