package com.fr.bi.stable.gvi;import com.fr.base.FRContext;import com.fr.bi.stable.utils.program.BINonValueUtils;import java.io.ByteArrayInputStream;import java.io.DataInputStream;import java.io.IOException;import java.util.zip.GZIPInputStream;/** * Created by Hiram on 2014/11/24. */public enum GroupValueIndexCreator {    ROARING_INDEX((byte) 4) {        @Override        public GroupValueIndex create() {            return new RoaringGroupValueIndex();        }    },    ROARING_INDEX_ID((byte) 3) {        @Override        public GroupValueIndex create() {            return new IDGroupValueIndex();        }    },    ROARING_INDEX_All_SHOW((byte) 5) {        @Override        public GroupValueIndex create() {            return new AllShowRoaringGroupValueIndex();        }    };    private byte type;    GroupValueIndexCreator(byte type) {        this.type = type;    }    protected static GroupValueIndex createGroupValueIndex(byte[] b) {        ByteArrayInputStream bais = null;        GZIPInputStream gzip = null;        DataInputStream ois = null;        GroupValueIndex result = null;        if (b.length == 0) {            return RoaringGroupValueIndex.createGroupValueIndex(new Integer[]{});        }        //pony这个还是不走下面吧，少一次循环        if (b[0] == GroupValueIndexCreator.ROARING_INDEX_ID.getType()) {            return IDGroupValueIndex.createGroupValueIndex(b);        }        try {            bais = new ByteArrayInputStream(b);//					gzip  = new GZIPInputStream(bais);            ois = new DataInputStream(bais);            result = createGroupValueIndexByType(ois.readByte());            result.readFields(ois);        } catch (IOException e) {            FRContext.getLogger().error(e.getMessage(), e);        } finally {            if (ois != null) {                try {                    ois.close();                } catch (IOException e) {                    throw BINonValueUtils.beyondControl(e);                }            }            if (gzip != null) {                try {                    gzip.close();                } catch (IOException e) {                    throw BINonValueUtils.beyondControl(e);                }            }            if (bais != null) {                try {                    bais.close();                } catch (IOException e) {                    throw BINonValueUtils.beyondControl(e);                }            }        }        return result;    }    private static GroupValueIndex createGroupValueIndexByType(byte type) {        for (GroupValueIndexCreator creator : values()) {            if (type == creator.getType()) {                return creator.create();            }        }        return null;    }    public byte getType() {        return type;    }    public abstract GroupValueIndex create();}