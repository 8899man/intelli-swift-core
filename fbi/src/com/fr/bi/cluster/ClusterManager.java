package com.fr.bi.cluster;import com.finebi.cube.common.log.BILoggerFactory;import com.fr.base.FRContext;import com.fr.bi.cluster.manager.TextClusterHostManager;import com.fr.bi.cluster.zookeeper.BIClusterMissionManager;import com.fr.bi.cluster.zookeeper.ZooKeeperException;import com.fr.bi.cluster.zookeeper.ZooKeeperManager;import com.fr.bi.cluster.zookeeper.ZooKeeperManagerInterface;/** * Created by Hiram on 2015/2/27. */public class ClusterManager implements BIClusterManagerInterface {    private static ClusterManager ourInstance = new ClusterManager();    private static ZooKeeperManagerInterface zooKeeperManager;    private static ClusterConfigManagerInterface clusterConfigManager;    private static ClusterHostManagerInterface hostManager;    private BIMissionManager missionManager;    public static final String MASTER_INFO = "masterInfo";    private ClusterManager() {    }    public static ClusterManager getInstance() {        ClusterAdapter.registerBIClusterManagerInterface(ourInstance);        return ourInstance;    }    @Override    public ZooKeeperManagerInterface getZooKeeperManager() {        return zooKeeperManager;    }    @Override    public BIMissionManager getMissionManager() {        return missionManager;    }    @Override    public ClusterConfigManagerInterface getClusterConfigManager() {        return clusterConfigManager;    }    @Override    public ClusterHostManagerInterface getHostManager() {        return hostManager;    }    public void setHostManager(ClusterHostManagerInterface hostManager) {        this.hostManager = hostManager;    }    @Override    public void initClusterEnv() {        if (isClusterEnv()) {            try {                hostManager = TextClusterHostManager.getInstance();                zooKeeperManager = ZooKeeperManager.getInstance();                ((ZooKeeperManager) zooKeeperManager).addWatchers(MASTER_INFO, new BIMasterWatcher());                zooKeeperManager.startListen();                missionManager = new BIClusterMissionManager();            } catch (ZooKeeperException e) {                FRContext.getLogger().error("zookeeper can't connection!");                BILoggerFactory.getLogger().error(e.getMessage(), e);            }        }    }    @Override    public boolean isHost() {        return false;    }    private boolean isClusterEnv() {        return true;    }}