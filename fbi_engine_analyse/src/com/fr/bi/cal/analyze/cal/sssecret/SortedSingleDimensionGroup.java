package com.fr.bi.cal.analyze.cal.sssecret;import java.util.Iterator;import java.util.Map;import com.fr.bi.cal.analyze.cal.result.Node;import com.fr.bi.cal.analyze.cal.sssecret.sort.SortedNode;import com.fr.bi.cal.analyze.cal.sssecret.sort.SortedNoneDimensionGroup;import com.fr.bi.stable.report.result.LightNode;/** * Created by Hiram on 2015/1/16. */public class SortedSingleDimensionGroup implements ISingleDimensionGroup {    private SortedNode sortedNode;    private ISingleDimensionGroup singleDimensionGroup;    public SortedSingleDimensionGroup() {    }    public SortedSingleDimensionGroup(SingleDimensionGroup s, SortedNode sortedNode) {        this.singleDimensionGroup = s;        this.sortedNode = sortedNode;    }    public void setSingleDimensionGroup(ISingleDimensionGroup singleDimensionGroup) {        this.singleDimensionGroup = singleDimensionGroup;    }    public void setSortedNode(SortedNode sortedNode) {        this.sortedNode = sortedNode;    }    @Override    public int getChildIndexByValue(Object value) {        int originalIndex = singleDimensionGroup.getChildIndexByValue(value);        return sortedNode.getIndexByOriginalIndex(originalIndex);    }    @Override    public NoneDimensionGroup getChildDimensionGroup(int row) {        NoneDimensionGroup noneDimensionGroup = singleDimensionGroup.getChildDimensionGroup(getOriginalRow(row));        SortedNoneDimensionGroup sortDimensionGroup = new SortedNoneDimensionGroup(noneDimensionGroup);        sortDimensionGroup.setSortedNode(sortedNode.getChild(row));        return sortDimensionGroup;    }    @Override    public Object getChildData(int row) {        return singleDimensionGroup.getChildData(getOriginalRow(row));    }    @Override    public String getChildShowName(int row) {        return singleDimensionGroup.getChildShowName(getOriginalRow(row));    }    @Override    public Node getChildNode(int row) {        return singleDimensionGroup.getChildNode(getOriginalRow(row));    }    @Override    public LightNode getRoot() {        return singleDimensionGroup.getRoot();    }    @Override    public void release() {        singleDimensionGroup.release();    }    @Override    public int getCurrentTotalRow() {        return singleDimensionGroup.getCurrentTotalRow();    }    public int getOriginalRow(int pos) {        return sortedNode.getOriginalIndex(pos);    }    class SortIterator implements Iterator {        private int pos;        @Override        public boolean hasNext() {            return sortedNode.hasPosition(pos);        }        @Override        public Object next() {            Node childNode = singleDimensionGroup.getChildNode(sortedNode.getSortIndex(pos));            CEntry cEntry = new CEntry(childNode.getData(), childNode.getGroupValueIndex());            pos++;            return cEntry;        }        @Override        public void remove() {        }    }    class CEntry implements Map.Entry {        private Object key;        private Object value;        CEntry(Object key, Object value) {            this.key = key;            this.value = value;        }        @Override        public Object getKey() {            return key;        }        @Override        public Object getValue() {            return value;        }        @Override        public Object setValue(Object value) {            return this.value = value;        }    }}