package com.fr.bi.cal.analyze.cal.result;import com.fr.bi.stable.report.result.DimensionCalculator;import java.util.AbstractList;import java.util.ArrayList;import java.util.List;/** * Created by Hiram on 2015/1/13. */public class ColumnNodeList extends AbstractList<NewDiskBaseRootNodeChild> {    List<MemNode> memNodeList = new ArrayList<MemNode>();    DimensionCalculator columnKey;    private int size = 0;    @Override    public NewDiskBaseRootNodeChild get(int index) {        MemNode memNode = memNodeList.get(index);        NewDiskBaseRootNodeChild node = new NewDiskBaseRootNodeChild(columnKey, memNode.getData());        node.setParent(memNode.getParent());        node.setSibling(memNode.getSibling());        node.setGroupValueIndex(memNode.getGroupValueIndex());        node.setShowValue(memNode.getShowValue());        node.setComparator(memNode.getComparator());        return node;    }    public MemNode getMemNode(int index) {        return memNodeList.get(index);    }    @Override    public int size() {        return memNodeList.size();    }    @Override    public boolean add(NewDiskBaseRootNodeChild node) {        if (columnKey == null) {            columnKey = node.key;        }        MemNode memNode = createLightNode(node);        memNodeList.add(memNode);        size++;        return true;    }    @Override    public void clear() {        memNodeList.clear();    }    private MemNode createLightNode(NewDiskBaseRootNodeChild node) {        MemNode memNode = new MemNode();        memNode.setData(node.getData());        memNode.setParent(node.getParent());        memNode.setSibling(node.getSibling());        memNode.setGroupValueIndex(node.getGroupValueIndex());        memNode.setShowValue(node.getShowValue());        memNode.setComparator(node.getComparator());        return memNode;    }}