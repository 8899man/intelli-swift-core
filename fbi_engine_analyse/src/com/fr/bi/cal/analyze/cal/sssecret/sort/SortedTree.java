package com.fr.bi.cal.analyze.cal.sssecret.sort;/** * Created by Hiram on 2015/1/16. */public class SortedTree {    int[] index = new int[]{0, -1, 1, 2, 3};    private SortedNode root = new SortedNode();    public SortedTree() {    }    public SortedNode getLastSortedNode(int deep) {        ensureLastDeep(deep);        SortedNode retNode = getRoot();        for (int i = 0; i < deep; i++) {            retNode = retNode.getLastChild();        }        return retNode;    }    /**     * 确保最底层深度有deep     *     * @param deep 深度     */    public void ensureLastDeep(int deep) {        SortedNode parent = getRoot();        SortedNode child;        for (int i = 0; i < deep; i++) {            child = parent.getLastChild();            if (child == null) {                child = new SortedNode();                parent.addChild(child);            }        }    }    public void refreshTestSortedNode() {        getRoot().setSortedIndex(index);        SortedNode[] children = new SortedNode[index.length];        for (int i = 0; i < children.length; i++) {            children[i] = new SortedNode();            children[i].setSortedIndex(index);        }        getRoot().setChildren(children);    }    public SortedNode getSortedNode(int[] index) {        SortedNode ret = getRoot();        for (int i = 0; i < index.length; i++) {            ret = getRoot().getChild(index[i]);        }        return ret;    }    public SortedNode getRoot() {        return root;    }    public void setRoot(SortedNode root) {        this.root = root;    }}