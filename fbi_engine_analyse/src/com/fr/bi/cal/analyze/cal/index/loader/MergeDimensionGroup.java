package com.fr.bi.cal.analyze.cal.index.loader;import com.fr.bi.cal.analyze.cal.result.Node;/** * Created by Hiram on 2015/1/12. */public class MergeDimensionGroup {    SummaryDimensionGroup[] summaryDimensionGroups;    public MergeDimensionGroup(SummaryDimensionGroup[] summaryDimensionGroups) {        this.summaryDimensionGroups = summaryDimensionGroups;    }    private Node[] nextNodes(SummaryDimensionGroup[] summaryDimensionGroups) {        Node[] nodes = getCurrentNodes(summaryDimensionGroups);        Node[] minNodes = getMinNodesNodes(summaryDimensionGroups, nodes);        moveNext(summaryDimensionGroups, minNodes);        return minNodes;    }    private Node[] getCurrentNodes(SummaryDimensionGroup[] summaryDimensionGroups) {        Node[] nodes = new Node[summaryDimensionGroups.length];        for (int i = 0; i < summaryDimensionGroups.length; i++) {            nodes[i] = (Node) summaryDimensionGroups[i].getCurrentNode();        }        return nodes;    }    private Node[] getMinNodesNodes(SummaryDimensionGroup[] summaryDimensionGroups, Node[] nodes) {        Node[] minNodes = new Node[summaryDimensionGroups.length];        Object minValue = null;        int firstMinValue = 0;        for (int i = 0; i < nodes.length; i++) {            Node node = nodes[i];            if (node == null) {                continue;            }            if (minValue == null && node != null) {                minValue = node.getData();            }            int c = node.getComparator().compare(minValue, node.getData());            if (c > 0) {                minValue = node.getData();                firstMinValue = i;                minNodes[i] = nodes[i];            } else if (c == 0) {                minNodes[i] = nodes[i];            }        }        for (int i = 0; i < firstMinValue; i++) {            minNodes[i] = null;        }        return minNodes;    }    private Node mergeNodes(Node[] minNodes) {        Node mergeNode = new Node(null, null);        for (int i = 0; i < minNodes.length; i++) {            if (minNodes[i] != null) {                if (mergeNode.getData() == null) {                    mergeNode.setData(minNodes[i].getData());                }                mergeNode.setSummaryValue(minNodes[i].getSummaryValue());            }        }        return mergeNode;    }    private void moveNext(SummaryDimensionGroup[] summaryDimensionGroups, Node[] minNodes) {        for (int i = 0; i < minNodes.length; i++) {            if (minNodes[i] != null) {                summaryDimensionGroups[i].next();            }        }    }    Node[] getFirstMinNodes(SummaryDimensionGroup[] summaryDimensionGroups) {        for (int i = 0; i < summaryDimensionGroups.length; i++) {            summaryDimensionGroups[i].next();        }        return nextNodes(summaryDimensionGroups);    }    private boolean isAllNull(Node[] minNodes) {        for (int i = 0; i < minNodes.length; i++) {            if (minNodes[i] != null) {                return false;            }        }        return true;    }//	public boolean hasNe}