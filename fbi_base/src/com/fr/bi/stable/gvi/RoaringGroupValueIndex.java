package com.fr.bi.stable.gvi;import java.io.DataInput;import java.io.DataOutput;import java.io.IOException;import com.fr.bi.stable.gvi.roaringbitmap.IntIterator;import com.fr.bi.stable.gvi.roaringbitmap.RoaringBitmap;import com.fr.bi.stable.gvi.traversal.BrokenTraversalAction;import com.fr.bi.stable.gvi.traversal.SingleRowTraversalAction;import com.fr.bi.stable.gvi.traversal.TraversalAction;/** * Created by Hiram on 2015/6/19. */public class RoaringGroupValueIndex extends AbstractGroupValueIndex {	/**	 * 	 */	private static final long serialVersionUID = -6076084903420996622L;	private RoaringBitmap bitmap = new RoaringBitmap();		public RoaringGroupValueIndex(RoaringBitmap bitmap){		this.bitmap = bitmap;	}	@Override	public GroupValueIndex AND(GroupValueIndex valueIndex) {		if (valueIndex == null) {			return this;		}		if (isAllEmptyRoaringGroupValueIndex(valueIndex)) {			return valueIndex;		} else if (isAllShowRoaringGroupValueIndex(valueIndex)) {			return this;		}		RoaringGroupValueIndex ret = clone();		ret.bitmap.and((((RoaringGroupValueIndex) valueIndex).bitmap));		return ret;	}	public static boolean isAllEmptyRoaringGroupValueIndex(GroupValueIndex valueIndex) {		return valueIndex.getRowsCountWithData() == 0;	}	public RoaringGroupValueIndex() {	}	@Override	public RoaringGroupValueIndex clone() {		RoaringGroupValueIndex ret = new RoaringGroupValueIndex();		ret.bitmap = bitmap.clone();		return ret;	}		@Override	public GroupValueIndex ANDNOT(GroupValueIndex valueIndex) {		if (valueIndex == null) {			return this;		}		if (isAllEmptyRoaringGroupValueIndex(valueIndex)) {			return this;		} else if (isAllShowRoaringGroupValueIndex(valueIndex)) {			return new RoaringGroupValueIndex();		}		return new RoaringGroupValueIndex(RoaringBitmap.andNot(bitmap, ((RoaringGroupValueIndex) valueIndex).bitmap));	}	@Override	public GroupValueIndex andnot(GroupValueIndex index) {		if(index == null || isAllEmptyRoaringGroupValueIndex(index)){			return this;		}		if(isAllShowRoaringGroupValueIndex(index)){			bitmap.clear(); 		} else {			bitmap.andNot(((RoaringGroupValueIndex) index).bitmap);		} 		return this;	}	@Override	public GroupValueIndex OR(GroupValueIndex valueIndex) {		if (valueIndex == null || isAllEmptyRoaringGroupValueIndex(valueIndex)) {			return this;		}		if (isAllShowRoaringGroupValueIndex(valueIndex)) {			return valueIndex;		}		RoaringGroupValueIndex ret = clone();		ret.bitmap.or((((RoaringGroupValueIndex) valueIndex).bitmap));		return ret;	}	public static boolean isAllShowRoaringGroupValueIndex(GroupValueIndex valueIndex) {		return valueIndex instanceof AllShowRoaringGroupValueIndex;	}	//改变自身and 	@Override	public GroupValueIndex and(GroupValueIndex valueIndex) {		if (valueIndex == null || isAllShowRoaringGroupValueIndex(valueIndex)) {			return this;		}		bitmap.and((((RoaringGroupValueIndex) valueIndex).bitmap));		return this;	}	//改变自身的or //FIXME如何预防valueIndex不是allshow呢	@Override	public GroupValueIndex or(GroupValueIndex valueIndex) {		if (valueIndex == null  || isAllEmptyRoaringGroupValueIndex(valueIndex)) {			return this;		}		if(isAllShowRoaringGroupValueIndex(valueIndex)){			return valueIndex;		}		bitmap.or((((RoaringGroupValueIndex) valueIndex).bitmap));		return this;	}	@Override	public GroupValueIndex NOT(int rowCount) {		RoaringGroupValueIndex ret = clone();		ret.bitmap.flip(0, rowCount);		return ret;	}	@Override	public void addValueByIndex(int row) {		bitmap.add(row);	}	@Override	public boolean isAllEmpty() {//		if(DebugUtils.isIsAllEmpty()){//			return false;//		}		return bitmap.getCardinality() == 0;	}	@Override	public void Traversal(TraversalAction action) {		action.actionPerformed(bitmap.toArray());	}	@Override	//TODOiteartor 需要改成非iterator 模板	public void Traversal(SingleRowTraversalAction action) {		IntIterator iterator = bitmap.getIntIterator();		while (iterator.hasNext()) {			action.actionPerformed(iterator.next());		}	}	@Override	public boolean BrokenableTraversal(BrokenTraversalAction action) {		IntIterator iterator = bitmap.getIntIterator();		while (iterator.hasNext()) {			if(action.actionPerformed(iterator.next())){				return true;			}		}		return false;	}	@Override	public boolean isOneAt(int rowIndex) {		return bitmap.contains(rowIndex);	}	@Override	public int getRowsCountWithData() {		return bitmap.getCardinality();	}	@Override	public boolean hasSameValue(GroupValueIndex parentIndex) {		return parentIndex.BrokenableTraversal(new BrokenTraversalAction() {			@Override			public boolean actionPerformed(int row) {				if (bitmap.contains(row)){					return true;				}				return false;			}		});	}	@Override	public void write(DataOutput out) throws IOException {		bitmap.serialize(out);	}	@Override	public void readFields(DataInput in) throws IOException {		bitmap.deserialize(in);	}	public static RoaringGroupValueIndex createGroupValueIndex(Integer[] rowIndexs) {		RoaringGroupValueIndex roaringGroupValueIndex = new RoaringGroupValueIndex();		roaringGroupValueIndex.bitmap = RoaringBitmap.bitmapOf(rowIndexs);		return roaringGroupValueIndex;	}	public static AllShowRoaringGroupValueIndex createAllShowGroupValueIndex(int rowCount) {		return new AllShowRoaringGroupValueIndex(rowCount);	}	@Override	public boolean equals(Object o) {		if (this == o) {			return true;		}		if (o == null || getClass() != o.getClass()) {			return false;		}		RoaringGroupValueIndex that = (RoaringGroupValueIndex) o;		if (bitmap != null ? !bitmap.equals(that.bitmap) : that.bitmap != null) {			return false;		}		return true;	}	@Override	public int hashCode() {		int result = bitmap != null ? bitmap.hashCode() : 0;		return result;	}	public static RoaringGroupValueIndex createAllEmptyGroupValueIndex() {		return new RoaringGroupValueIndex();	}		@Override	protected byte getType() {		return GroupValueIndexCreator.ROARING_INDEX.getType();	}	public RoaringBitmap getBitMap() {		return bitmap;	}}