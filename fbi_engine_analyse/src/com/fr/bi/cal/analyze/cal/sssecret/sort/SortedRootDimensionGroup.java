package com.fr.bi.cal.analyze.cal.sssecret.sort;import com.finebi.cube.api.ICubeValueEntryGetter;import com.fr.bi.cal.analyze.cal.result.NodeExpander;import com.fr.bi.cal.analyze.cal.sssecret.*;import com.fr.bi.cal.analyze.session.BISession;import com.fr.bi.conf.report.BIWidget;import com.fr.bi.conf.report.widget.field.dimension.BIDimension;import com.fr.bi.stable.report.result.DimensionCalculator;import java.util.Comparator;/** * Created by Hiram on 2015/1/16. */public class SortedRootDimensionGroup extends RootDimensionGroup {    private SortedTree sortedTree;    public SortedRootDimensionGroup(NoneDimensionGroup root, DimensionCalculator[] cks, BIDimension[] dimensions, NodeExpander expander, BISession session, SortedTree sortedTree, BIWidget widget, boolean useRealData) {        super(root, cks, dimensions, expander, session, widget, useRealData);        this.sortedTree = sortedTree;        SortedNoneDimensionGroup sortedNoneDimensionGroup = new SortedNoneDimensionGroup(root);        sortedNoneDimensionGroup.setSortedNode(sortedTree.getRoot());        this.root = sortedNoneDimensionGroup;    }    public SortedRootDimensionGroup(NoneDimensionGroup root, DimensionCalculator[] cks, BIDimension[] dimensions, NodeExpander expander, BISession session, SortedTree sortedTree, BIWidget widget, boolean useRealData, ICubeValueEntryGetter[] getters) {        super(root, cks, dimensions, expander, session, widget, useRealData, getters);        this.sortedTree = sortedTree;        SortedNoneDimensionGroup sortedNoneDimensionGroup = new SortedNoneDimensionGroup(root);        sortedNoneDimensionGroup.setSortedNode(sortedTree.getRoot());        this.root = sortedNoneDimensionGroup;    }    @Override    protected GroupConnectionValue createGroupConnectionValue(ISingleDimensionGroup sg, int deep, int row, NoneDimensionGroup nds) {        GroupConnectionValue ngv = new GroupConnectionValue(cks[deep], sg.getChildData(row), createSortComparator(sg), nds);        if (sg instanceof SortedSingleDimensionGroup) {            SortedSingleDimensionGroup sortedSg = (SortedSingleDimensionGroup) sg;            ngv.setSortKey(sortedSg.getOriginalRow(row));        }        return ngv;    }    public SortedTree getSortedTree() {        return sortedTree;    }    public void setSortedTree(SortedTree sortedTree) {        this.sortedTree = sortedTree;    }    private Comparator createSortComparator(ISingleDimensionGroup sg) {        return new SortedComparator(sg);    }}