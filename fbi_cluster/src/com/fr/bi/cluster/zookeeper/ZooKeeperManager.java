package com.fr.bi.cluster.zookeeper;import com.fr.base.FRContext;import com.fr.bi.cluster.ClusterAdapter;import com.fr.bi.cluster.manager.ClusterManager;import com.fr.bi.cluster.manager.EmptyClusterManager;import com.fr.bi.cluster.retry.RetryNTimes;import com.fr.bi.cluster.utils.ClusterEnv;import com.fr.bi.cluster.utils.PropertiesUtils;import com.fr.bi.cluster.wrapper.ZooKeeperConfig;import com.fr.bi.cluster.wrapper.ZooKeeperHandler;import com.fr.bi.cluster.wrapper.ZooKeeperWrapper;import com.fr.bi.cluster.zookeeper.watcher.BICubeStatusWatcher;import com.fr.bi.cluster.zookeeper.watcher.BIMaster;import com.fr.bi.cluster.zookeeper.watcher.BIWorker;import com.finebi.cube.common.log.BILoggerFactory;import com.fr.general.FRLogger;import org.apache.log4j.PropertyConfigurator;import org.apache.zookeeper.*;import java.io.File;import java.io.IOException;import java.util.Iterator;import java.util.Map;import java.util.Properties;import java.util.concurrent.ConcurrentHashMap;/** * Created by Hiram on 2015/2/26. */public class ZooKeeperManager implements ZooKeeperManagerInterface {    public static final String CREATE_ANALYSE_WATCHER = "analyseOperationWatcher";    public static final String CUBE_WATCHER = "cubeWatcher";    public static final String MASTER = "biMaster";    public static final String WORKER = "biWorker";    public static final String CUBE_STATUS = "cubeStatus";    private static final FRLogger LOG = FRContext.getLogger();    private static final int TICK_TIME = 60000;    private static ZooKeeperManager ourInstance ;    private Map<String, BIWatcher> watcherContainer;    private ZooKeeperWrapper zk;    private String ip;    private String port;    private ZooKeeperManager() {        File zookeeperInfo = ClusterEnv.getZookeeperInfoFile();        Properties properties = PropertiesUtils.load(zookeeperInfo);        if (!zookeeperInfo.exists()) {//            try {////                throw new ZooKeeperException("zooKeeper 配置文件不存在! File:" + zookeeperInfo.getAbsolutePath());//            } catch (ZooKeeperException ex) {//                 BILogger.getLogger().error(e.getMessage(), e);//            }        }        watcherContainer = new ConcurrentHashMap<String, BIWatcher>();        ip = properties.getProperty("ip");        port = properties.getProperty("port");        ZooKeeperConfig config = generateConfig();        ZooKeeperHandler handler = new ZooKeeperHandler(config, new BIDefaultWatcher());        ZooKeeperWrapper wrapper = new ZooKeeperWrapper(handler);        wrapper.initial(new RetryNTimes(10, 6000));        zk = wrapper;        if(ClusterEnv.isCluster()) {            initialWatchers();            registerWatchers();        }    }    public static synchronized ZooKeeperManager getInstance() {        if (ourInstance != null) {            return ourInstance;        } else {            synchronized (ZooKeeperManager.class) {                if (ourInstance == null) {                    ourInstance = new ZooKeeperManager();                }                return ourInstance;            }        }    }    public static void main(String[] args) throws Exception {//        PropertyConfigurator.configure("c:/log4j.properties");//        if (ClusterEnv.isCluster()) {//            try {//                ClusterManager.getInstance().initClusterEnv();//                ClusterAdapter.registerBIClusterManagerInterface(ClusterManager.getInstance());//            } catch (Exception ex) {//                BILoggerFactory.getLogger().error(ex.getMessage(), ex);//            }//        } else {//            ClusterAdapter.registerBIClusterManagerInterface(EmptyClusterManager.getInstance());//        }////        ZooKeeperManager manager = ZooKeeperManager.getInstance();////        new MyThread(manager).start();////        String s = manager.getZooKeeper().create("/mastertest", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);//        System.err.println("s: " + s);////        s = manager.getZooKeeper().create("/watch", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);//        System.err.println("s: " + s);//        Thread.sleep(1000);//        ZooKeeper zk = new ZooKeeper("127.0.0.1:2181",400000,null/*new BIAnalyseOperationWatcher()*/);//        Stat s =null;//        if(zk.exists("/test4", false)==null){//           zk.create("/test4", "znode1".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);//        }//        s = zk.exists("/test4", false);//        System.out.println(s.toString());//		zk.create("/watch", "1".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);//		byte[] data = zk.getData("/test4", true, null);//		zk.exists("/test4", false);//		zk.setData("/watch", "2".getBytes(), -1);//		zk.setData("/watch", "2".getBytes(), -1);//		zk.setData("/watch", "2".getBytes(), -1);//		System.out.println(new String(data));//		Stat exists = zk.exists("/test", true);//        Thread.currentThread().join();    }    private ZooKeeperConfig generateConfig() {        ZooKeeperConfig config = new ZooKeeperConfig();        config.setConnectString(ip + ":" + port);        config.setTickTime(TICK_TIME);        return config;    }    public BIWatcher getWatcher(String watcherName) {        if (watcherContainer.containsKey(watcherName)) {            return watcherContainer.get(watcherName);        }        return null;    }    private void initialWatchers() {//        watcherContainer.put(CREATE_ANALYSE_WATCHER, new BIAnalyseOperationWatcher());//        watcherContainer.put(CUBE_WATCHER, new BICubeWatcher());//        watcherContainer.put(WORKER, new BIWorker());//        watcherContainer.put(MASTER, new BIMaster());        watcherContainer.put(CUBE_STATUS, new BICubeStatusWatcher());    }    private void registerWatchers() {        Iterator<BIWatcher> it = watcherContainer.values().iterator();        while (it.hasNext()) {            registerWatcher(it.next());        }    }    public String getPort() {        return port;    }    public String getIp() {        return ip;    }    private void init() throws ZooKeeperException {        try {        } catch (NumberFormatException e) {//            throw castException("zooKeeper 端口解析出错", e);        }    }    @Override    public ZooKeeperWrapper getZooKeeper() {        return zk;    }    private ZooKeeperException castException(Exception e) {        return castException(e.getMessage(), e);    }    private ZooKeeperException castException(String msg, Exception e) {        return new ZooKeeperException(e.getMessage(), e);    }    private void registerWatcher(BIWatcher watcher) {        try {            watcher.init(zk);        } catch (Exception ex) {            BILoggerFactory.getLogger().error(ex.getMessage(), ex);        }        watcher.setWatcherRegistered(true);    }    @Override    public void notifyCubeUpdateConfig() {        try {            watcherContainer.get(CUBE_WATCHER).rewriteData(String.valueOf(System.currentTimeMillis()).getBytes(), -1);        } catch (Exception ex) {            BILoggerFactory.getLogger().error(ex.getMessage(), ex);        }    }    @Override    public void notifyUpdateAnalyse() {        try {            watcherContainer.get(CREATE_ANALYSE_WATCHER).rewriteData(String.valueOf(System.currentTimeMillis()).getBytes(), -1);        } catch (Exception ex) {            BILoggerFactory.getLogger().error(ex.getMessage(), ex);        }    }    /**     * 生成一个zookeeper。     *     * @return     */    public ZooKeeper generateZookeeper(Watcher defaultWatcher) {        try {            return new ZooKeeper(getIp(), TICK_TIME, defaultWatcher);        } catch (IOException ex) {            BILoggerFactory.getLogger().error(ex.getMessage(), ex);        }        return null;    }    @Override    public void startListen() throws ZooKeeperException {        init();    }}//class MyThread extends Thread {//    ZooKeeperManager manager;////    MyThread(ZooKeeperManager manager) {//        this.manager = manager;//    }////    public void run() {//        try {//            String s = manager.getZooKeeper().create("/watch", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);//            System.err.println("s: " + s);//        } catch (KeeperException e) {//            BILoggerFactory.getLogger().error(e.getMessage(), e);//        } catch (InterruptedException e) {//            BILoggerFactory.getLogger().error(e.getMessage(), e);//        } catch (Exception e) {//            e.printStackTrace();//        }//    }//}