package com.fr.bi.cal.analyze.cal.sssecret.sort;import com.fr.cache.list.IntList;import java.util.ArrayList;import java.util.Arrays;import java.util.List;/** * Created by Hiram on 2015/1/16. */public class SortedNode {    private List<SortedNode> children = new ArrayList<SortedNode>(1);    private int[] sortedIndex;    private int[] sequence;    public SortedNode getChild(int index) {        if (children == null || index >= children.size()) {            return null;        }        return children.get(index);    }    public SortedNode getLastChild() {        if (children.isEmpty()) {            return null;        }        return children.get(children.size() - 1);    }    public void addChild(SortedNode node) {        children.add(node);    }    public int[] getSortedIndex() {        return sortedIndex;    }    public void setSortedIndex(int[] sortedIndex) {        this.sortedIndex = sortedIndex;    }    public void setChildren(SortedNode[] children) {        this.children = Arrays.asList(children);    }    public void resetChildren(int[] sortedIndex) {        List<SortedNode> newChildren = new ArrayList<SortedNode>();        for (int i = 0; i < sortedIndex.length; i++) {            newChildren.add(children.get(sortedIndex[i]));        }        this.children = newChildren;    }    public boolean hasPosition(int pos) {        ensureInitSequence();        return pos < sequence.length;    }    public int getSortIndex(int pos) {        return sortedIndex[getOriginalIndex(pos)];    }    public int getOriginalIndex(int pos) {        ensureInitSequence();//        if (pos >= sequence.length) {//            throw GroupOutOfBoundsException.create(pos);//        }        return sequence[pos];    }    private void ensureInitSequence() {        if (!isInitSequence()) {            initSequence();        }    }    private boolean isInitSequence() {        return sequence != null;    }    private void initSequence() {        IntList list = new IntList();        for (int i = 0; i < sortedIndex.length; i++) {            if (sortedIndex[i] != -1) {                list.add(sortedIndex[i]);            }        }        sequence = list.toArray();    }    public int getIndexByOriginalIndex(int originalIndex) {        for (int i = 0; i < sequence.length; i++) {            if (sequence[i] == originalIndex) {                return i;            }        }        return 0;    }}