package com.fr.bi.cal.analyze.cal.index.loader;import com.fr.bi.cal.analyze.cal.result.Node;import com.fr.bi.cal.analyze.cal.sssecret.ISingleDimensionGroup;import com.fr.bi.cal.analyze.cal.sssecret.NoneDimensionGroup;import com.fr.bi.cal.analyze.cal.store.GroupKey;import com.fr.bi.cal.analyze.session.BISession;import com.fr.bi.stable.report.key.TargetGettingKey;import com.fr.bi.stable.report.result.DimensionCalculator;import com.fr.bi.stable.report.result.SummaryValue;import com.fr.bi.stable.report.result.TargetCalculator;/** * Created by Hiram on 2015/1/8. */class SummaryDimensionGroup {    ISingleDimensionGroup singleDimensionGroup = null;    private MergerInfo mergerInfo;    private DimensionCalculator columnKey;    private int currentRow = -1;    private boolean isEnd = false;    private SummaryValue currentNode;    private boolean needSummary = true;    public SummaryDimensionGroup(MergerInfo mergerInfo, DimensionCalculator columnKey) {        this.mergerInfo = mergerInfo;        this.columnKey = columnKey;        singleDimensionGroup = createSingleDimensionGroup();    }    public void next() {        if (isEnd) {            return;        }        currentRow++;        currentNode = getNode(currentRow);        checkEnd();    }    private void checkEnd() {        // æ”¹        if (currentNode == null) {            isEnd = true;        }    }    public SummaryValue getCurrentNode() {        return currentNode;    }    private SummaryValue getNode(int row) {        Node node = singleDimensionGroup.getChildNode(row);        if (isNeedSummary()) {            setSummaryValue(node);        }        return node;    }    private void setSummaryValue(SummaryValue summaryValue1) {        if (summaryValue1 == null) {            return;        }        Node node = (Node) summaryValue1;        BISession session = mergerInfo.getSession();        TargetCalculator summary = mergerInfo.getSummary();        TargetGettingKey tkey = mergerInfo.getTargetGettingKey();        NoneDimensionGroup childDimensionGroup = NoneDimensionGroup.createDimensionGroup(summary.createTableKey(), node.getGroupValueIndex(), session.getLoader());        Number summaryValue = childDimensionGroup.getSummaryValue(summary);        if (summaryValue != null) {            node.setSummaryValue(tkey, summaryValue);        }    }    private ISingleDimensionGroup createSingleDimensionGroup() {        NoneDimensionGroup root = mergerInfo.getRoot();        return root.createSingleDimensionGroup(null, null, columnKey, null, -1, mergerInfo.getRootDimensionGroup().isUseRealData());    }    GroupKey createSingleDimensionGroupKey() {        return mergerInfo.getRoot().createSingleDimensionGroupKey(columnKey, mergerInfo.getRootDimensionGroup().isUseRealData());    }    public boolean isNeedSummary() {        return needSummary;    }}