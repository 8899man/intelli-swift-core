package com.fr.bi.cal.analyze.cal.index.loader;import com.fr.bi.cal.analyze.cal.sssecret.NodeDimensionIterator;import com.fr.bi.field.target.key.cal.BICalculatorTargetKey;import com.fr.bi.field.target.target.BISummaryTarget;import com.fr.bi.cal.analyze.session.BISession;import com.fr.bi.conf.report.widget.field.dimension.BIDimension;import com.fr.bi.conf.report.widget.field.dimension.filter.ResultFilter;import com.fr.bi.stable.gvi.GroupValueIndex;import com.fr.bi.stable.report.key.TargetGettingKey;import java.util.ArrayList;import java.util.List;import java.util.Map;import java.util.concurrent.ConcurrentHashMap;/** * Created by Hiram on 2015/1/18. */public class DimensionGroupSorter {    private static Map<FilterGroupValueIndexKey, GroupValueIndex[]> filterGroupValueIndexMap = new ConcurrentHashMap<FilterGroupValueIndexKey, GroupValueIndex[]>();    private final BISession session;    List<MergerInfo> mergerInfoList = new ArrayList<MergerInfo>();    BIDimension[] rowDimension;    BISummaryTarget[] usedTargets;    Map<String, TargetGettingKey> targetsMap;    Map<String, ResultFilter> targetFilterMap;    List<BICalculatorTargetKey> calculatorTargets;    NodeDimensionIterator[] iterators;    public DimensionGroupSorter(List<MergerInfo> mergerInfoList, Map<String, ResultFilter> targetFilterMap, BIDimension[] rowDimension, BISummaryTarget[] usedTargets, Map<String, TargetGettingKey> targetsMap, BISession session) {        this.mergerInfoList = mergerInfoList;        this.rowDimension = rowDimension;        this.usedTargets = usedTargets;        this.targetsMap = targetsMap;        this.targetFilterMap = targetFilterMap;        this.session = session;        calculatorTargets = LoaderUtils.getCalculatorTargets(usedTargets, session);        LoaderUtils.setAllExpander(mergerInfoList);        iterators = getNodeIterators(mergerInfoList);    }    private NodeDimensionIterator[] getNodeIterators(List<MergerInfo> mergerInfoList) {        NodeDimensionIterator[] iterators = new NodeDimensionIterator[mergerInfoList.size()];        for (int i = 0; i < mergerInfoList.size(); i++) {            iterators[i] = mergerInfoList.get(i).createFinalRootDimensionGroup().moveToStart();        }        return iterators;    }}