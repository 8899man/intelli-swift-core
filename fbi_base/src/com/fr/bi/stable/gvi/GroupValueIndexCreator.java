package com.fr.bi.stable.gvi;import com.fr.base.FRContext;import java.io.IOException;/** * Created by Hiram on 2014/11/24. */public enum GroupValueIndexCreator {    ROARING_INDEX((byte) 4) {        @Override        public GroupValueIndex create() {            return new RoaringGroupValueIndex();        }    },    ROARING_INDEX_ID((byte) 3) {        @Override        public GroupValueIndex create() {            return new IDGroupValueIndex();        }    },    ROARING_INDEX_All_SHOW((byte) 5) {        @Override        public GroupValueIndex create() {            return new AllShowRoaringGroupValueIndex();        }    };    private byte type;    GroupValueIndexCreator(byte type) {        this.type = type;    }    protected static GroupValueIndex createGroupValueIndex(byte[] b) {        if (b.length == 0) {            return RoaringGroupValueIndex.createGroupValueIndex(new Integer[]{});        }        //pony IDGroupValueIndex这个调用比较频繁，还是不走下面吧，少一次循环，少new一个对象        if (b[0] == GroupValueIndexCreator.ROARING_INDEX_ID.getType()) {            return IDGroupValueIndex.createGroupValueIndex(b);        }        try {            RoaringBitMapDataInput ois = new RoaringBitMapDataInput(b);            GroupValueIndex result = createGroupValueIndexByType(ois.readByte());            result.readFields(ois);        } catch (IOException e) {            FRContext.getLogger().error(e.getMessage(), e);        }        return null;    }    private static GroupValueIndex createGroupValueIndexByType(byte type) {        for (GroupValueIndexCreator creator : values()) {            if (type == creator.getType()) {                return creator.create();            }        }        return null;    }    public byte getType() {        return type;    }    public abstract GroupValueIndex create();}