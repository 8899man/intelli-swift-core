package com.fr.bi.cal.analyze.cal.index.loader;import com.fr.bi.cal.analyze.cal.result.MergerNode;import com.fr.bi.cal.analyze.cal.result.NodeUtils;import com.fr.bi.manager.PerformancePlugManager;import com.finebi.cube.common.log.BILoggerFactory;import com.fr.bi.stable.gvi.GroupValueIndex;import com.fr.bi.stable.report.key.TargetGettingKey;import com.fr.bi.stable.report.result.LightNode;import java.util.Map;/** * Created by Hiram on 2015/1/26. */class TreeBuilder {    private LightNode root = new MergerNode();    private int nodeCount = 0;    public void addLastNode(int deep, LightNode node) {        if (PerformancePlugManager.getInstance().controlMaxMemory()) {            nodeCount++;            if (nodeCount > PerformancePlugManager.getInstance().getMaxNodeCount()) {                throw new RuntimeException("Memory is too large");//				throw new RuntimeException("当前模板占用内存过大，请更改条件或减少维度指标数量后再试");            }        }        LightNode parent = getLastParent(deep);        //FIXME BUG:68300        if (parent == null) {            return;        }        if (parent.getChildLength() != 0) {            LightNode lastChild = parent.getChild(parent.getChildLength() - 1);            lastChild.setSibling(node);        }        parent.addChild(node);        node.setParent(parent);    }    private LightNode getLastParent(int deep) {        LightNode node = root;        for (int i = 0; i < deep; i++) {            //FIXME BUG:68300            if (node.getChildLength() == 0) {                return null;            }            node = node.getChild(node.getChildLength() - 1);        }        return node;    }    public LightNode build() {        NodeUtils.setSiblingBetweenFirstAndLastChild(getTree());        return getTree();    }    public LightNode getTree() {        return root;    }    void printTree() {        printTree(root);    }    void printTree(LightNode root) {        StringBuilder builder = new StringBuilder();        for (int i = 0; i < root.getChildLength(); i++) {            LightNode child = root.getChild(i);            builder.append(child.getData());            builder.append('[');            for (int j = 0; j < child.getChildLength(); j++) {                if (j != 0) {                    builder.append(',');                }                builder.append(child.getChild(j).getData());            }            builder.append(']');            builder.append('\n');        }        BILoggerFactory.getLogger().info(builder.toString());    }    void setRootGroupValueIndexMap(Map<TargetGettingKey, GroupValueIndex> gviMap) {        this.root.setGroupValueIndexMap(gviMap);    }    void setRootTargetIndexValueMap(Map<TargetGettingKey, GroupValueIndex> targetIndexValueMap) {        this.root.setTargetIndexValueMap(targetIndexValueMap);    }    LightNode getRoot() {        return root;    }    void setRoot(LightNode root) {        this.root = root;    }    private void printTree0() {    }    private void printNodeData(LightNode node) {        if (node != null && node.getData() != null){            BILoggerFactory.getLogger().info(node.getData().toString());        }    }}