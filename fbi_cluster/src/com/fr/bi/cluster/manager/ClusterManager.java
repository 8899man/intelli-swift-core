package com.fr.bi.cluster.manager;import com.fr.base.FRContext;import com.fr.bi.cluster.BIClusterManagerInterface;import com.fr.bi.cluster.BIMissionManager;import com.fr.bi.cluster.ClusterConfigManagerInterface;import com.fr.bi.cluster.ClusterHostManagerInterface;import com.fr.bi.cluster.zookeeper.BIClusterMissionManager;import com.fr.bi.cluster.zookeeper.ZooKeeperException;import com.fr.bi.cluster.zookeeper.ZooKeeperManager;import com.fr.bi.cluster.zookeeper.ZooKeeperManagerInterface;import com.fr.bi.stable.utils.code.BILogger;/** * Created by Hiram on 2015/2/27. */public class ClusterManager implements BIClusterManagerInterface {    private static ClusterManager ourInstance = new ClusterManager();    private static ZooKeeperManagerInterface zooKeeperManager;    private static ClusterConfigManagerInterface clusterConfigManager;    private static ClusterHostManagerInterface hostManager;    private BIMissionManager missionManager;    private ClusterManager() {    }    public static ClusterManager getInstance() {        return ourInstance;    }    @Override    public ZooKeeperManagerInterface getZooKeeperManager() {        return zooKeeperManager;    }    @Override    public BIMissionManager getMissionManager() {        return missionManager;    }    @Override    public ClusterConfigManagerInterface getClusterConfigManager() {        return clusterConfigManager;    }    @Override    public ClusterHostManagerInterface getHostManager() {        return hostManager;    }    @Override    public void initClusterEnv() {        if (isClusterEnv()) {            try {                zooKeeperManager = ZooKeeperManager.getInstance();                zooKeeperManager.startListen();                hostManager = TextClusterHostManager.getInstance();                missionManager = new BIClusterMissionManager();            } catch (ZooKeeperException e) {                FRContext.getLogger().error("zookeeper can't connection!");                        BILogger.getLogger().error(e.getMessage(), e);            }        }    }    @Override    public boolean isHost() {        return false;    }    private boolean isClusterEnv() {        return true;    }}